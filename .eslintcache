[{"D:\\git-master\\react-graphql\\src\\index.js":"1","D:\\git-master\\react-graphql\\src\\apollo.js":"2","D:\\git-master\\react-graphql\\src\\routes\\Home.js":"3","D:\\git-master\\react-graphql\\src\\components\\App.js":"4","D:\\git-master\\react-graphql\\src\\routes\\Detail.js":"5","D:\\git-master\\react-graphql\\src\\components\\Movie.js":"6"},{"size":306,"mtime":1609511094586,"results":"7","hashOfConfig":"8"},{"size":475,"mtime":1611462128003,"results":"9","hashOfConfig":"8"},{"size":1815,"mtime":1611371281198,"results":"10","hashOfConfig":"8"},{"size":348,"mtime":1609511724241,"results":"11","hashOfConfig":"8"},{"size":2288,"mtime":1611217376615,"results":"12","hashOfConfig":"8"},{"size":1076,"mtime":1611373052194,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11qs5fv",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"D:\\git-master\\react-graphql\\src\\index.js",[],"D:\\git-master\\react-graphql\\src\\apollo.js",[],"D:\\git-master\\react-graphql\\src\\routes\\Home.js",["28"],"D:\\git-master\\react-graphql\\src\\components\\App.js",[],"D:\\git-master\\react-graphql\\src\\routes\\Detail.js",["29"],"import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport styled from \"styled-components\";\r\n\r\n// 새로운 쿼리의 함수를 만들지 않아도 병렬로 쿼리를 보낼 수 있음\r\nconst GET_MOVIE = gql`\r\n    query movie($id: Int!) {\r\n        movie(id: $id) {\r\n            title\r\n            language\r\n            rating\r\n            medium_cover_image\r\n            description_intro\r\n        }\r\n        suggestions(id: $id) {\r\n            id\r\n            medium_cover_image\r\n        }\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    background-image: linear-gradient(-45deg, #d754ab, #fd723a);\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    color: white;\r\n`;\r\n\r\nconst Column = styled.div`\r\n    margin-left: 10px;\r\n    width: 50%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 65px;\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nconst Subtitle = styled.h4`\r\n    font-size: 35px;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst Description = styled.p`\r\n    font-size: 28px;\r\n`;\r\n\r\nconst Poster = styled.div`\r\n    width: 25%;\r\n    height: 60%;\r\n    background-color: transparent;\r\n    background-image: url(${ props => props.bg });\r\n    background-size: cover;\r\n    background-position: center center;\r\n`;\r\n\r\nexport default () => {\r\n    const { id } = useParams();\r\n    const { loading, data } = useQuery(GET_MOVIE, {\r\n        variables: { id: +id }\r\n    });\r\n\r\n    // GraphQL은 기본적으로 cache를 가지고 있음\r\n    return (\r\n        <Container>\r\n            <Column>\r\n            {/* data를 바로 가져오는 것이 아니기 때문에 loading를 통해 확인 후 rendering */}\r\n            <Title>{ loading ? \"Loading...\" : data.movie.title }</Title>\r\n                <Subtitle>{ data?.movie?.language } ・ { data?.movie?.rating }</Subtitle>\r\n                <Description>{ data?.movie?.description_intro }</Description>\r\n            </Column>\r\n            {/* <Poster bg={ data && data.movie ? data.movie.medium_cover_image: \"\" }></Poster> */}\r\n            {/* Javascript optional chaining */}\r\n            <Poster bg={ data?.movie?.medium_cover_image }></Poster>\r\n        </Container>\r\n    );\r\n};","D:\\git-master\\react-graphql\\src\\components\\Movie.js",["30"],"import { useMutation } from \"@apollo/react-hooks\";\r\nimport React from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LIKE_MOVIE = gql`\r\n    mutation likeMovie($id: Int!) {\r\n        likeMovie(id: $id) @client\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    height: 380px;\r\n    width: 100%;\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n    border-radius: 7px;\r\n`;\r\n\r\nconst Poster = styled.div`\r\n    background-image: url(${ props => props.bg });\r\n    height: 100%;\r\n    width: 100%;\r\n    background-size: cover;\r\n    background-position: center center;\r\n`;\r\n\r\nexport default ({ id, bg, isLiked }) => {\r\n    const [likeMovie] = useMutation(LIKE_MOVIE, { variables: { id: parseInt(id) }});\r\n    return (\r\n        <Container>\r\n            <Link to={`/${ id }`}>\r\n                <Poster bg={ bg } />\r\n            </Link>\r\n            <button onClick={ isLiked? null : likeMovie }>{ isLiked ? \"Unlike\" : \"Like\" }</button>\r\n        </Container>\r\n    );\r\n};",{"ruleId":"31","severity":1,"message":"32","line":62,"column":1,"nodeType":"33","endLine":80,"endColumn":3},{"ruleId":"31","severity":1,"message":"32","line":62,"column":1,"nodeType":"33","endLine":82,"endColumn":3},{"ruleId":"31","severity":1,"message":"32","line":28,"column":1,"nodeType":"33","endLine":38,"endColumn":3},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration"]